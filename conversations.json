{
    "basePath": "/data",
    "definitions": {
        "ApiResponse": {
            "properties": {
                "code": {
                    "format": "int32",
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "xml": {
                "name": "##default"
            }
        },
        "Category": {
            "properties": {
                "id": {
                    "format": "int64",
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            },
            "xml": {
                "name": "Category"
            }
        },
        "Order": {
            "properties": {
                "complete": {
                    "type": "boolean"
                },
                "id": {
                    "format": "int64",
                    "type": "integer"
                },
                "petId": {
                    "format": "int64",
                    "type": "integer"
                },
                "quantity": {
                    "format": "int32",
                    "type": "integer"
                },
                "shipDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "status": {
                    "description": "Order Status",
                    "enum": [
                        "placed",
                        "approved",
                        "delivered"
                    ],
                    "type": "string"
                }
            },
            "xml": {
                "name": "Order"
            }
        },
        "Pet": {
            "properties": {
                "category": {
                    "$ref": "#/definitions/Category"
                },
                "id": {
                    "format": "int64",
                    "type": "integer"
                },
                "name": {
                    "example": "doggie",
                    "type": "string"
                },
                "photoUrls": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "xml": {
                        "name": "photoUrl",
                        "wrapped": true
                    }
                },
                "status": {
                    "description": "pet status in the store",
                    "enum": [
                        "available",
                        "pending",
                        "sold"
                    ],
                    "type": "string"
                },
                "tags": {
                    "items": {
                        "$ref": "#/definitions/Tag"
                    },
                    "type": "array",
                    "xml": {
                        "name": "tag",
                        "wrapped": true
                    }
                }
            },
            "required": [
                "name",
                "photoUrls"
            ],
            "xml": {
                "name": "Pet"
            }
        },
        "Tag": {
            "properties": {
                "id": {
                    "format": "int64",
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            },
            "xml": {
                "name": "Tag"
            }
        },
        "User": {
            "properties": {
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "id": {
                    "format": "int64",
                    "type": "integer"
                },
                "lastName": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "userStatus": {
                    "description": "User Status",
                    "format": "int32",
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            },
            "xml": {
                "name": "User"
            }
        }
    },
    "externalDocs": {
        "description": "Find out more about the BazaarVoice Conversations API",
        "url": "https://developer.bazaarvoice.com/apis/conversations/"
    },
    "host": "stg.api.bazaarvoice.com",
    "info": {
        "contact": {
            "email": "DeveloperAdvocate@bazaarvoice.com"
        },
        "description": "This is the BazaarVoice Conversations API.  You can find out more about it at <a href=\"https://developer.bazaarvoice.com/apis/conversations/\">http://swagger.io</a>.  For this sample, you can use the api key \"special-key\" to test the authorization filters",
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "termsOfService": "https://developer.bazaarvoice.com/terms",
        "title": "BazaarVoice Conversations API ",
        "version": "5.4"
    },
    "paths": {
        "/pet": {
            "post": {
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "description": "",
                "operationId": "addPet",
                "parameters": [
                    {
                        "description": "Pet object that needs to be added to the store",
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Pet"
                        }
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ],
                "summary": "Add a new pet to the store",
                "tags": [
                    "pet"
                ]
            },
            "put": {
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "description": "",
                "operationId": "updatePet",
                "parameters": [
                    {
                        "description": "Pet object that needs to be added to the store",
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Pet"
                        }
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Pet not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ],
                "summary": "Update an existing pet",
                "tags": [
                    "pet"
                ]
            }
        },
        "/pet/findByStatus": {
            "get": {
                "consumes": [
                    "application/xml",
                    "application/json",
                    "application/x-www-form-urlencoded"
                ],
                "description": "Multiple status values can be provided with comma seperated strings",
                "operationId": "findPetsByStatus",
                "parameters": [
                    {
                        "collectionFormat": "multi",
                        "default": "available",
                        "description": "Status values that need to be considered for filter",
                        "enum": [
                            "available",
                            "pending",
                            "sold"
                        ],
                        "in": "query",
                        "items": {
                            "type": "string"
                        },
                        "name": "status",
                        "required": false,
                        "type": "array"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Pet"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ],
                "summary": "Finds Pets by status",
                "tags": [
                    "pet"
                ]
            }
        },
        "/reviews.json": {
            "get": {
                "description": "Get Reviews for a given passKey",
                "operationId": "requestReviews",
                "parameters": [
                    {
                        "collectionFormat": "multi",
                        "description": "Value of API Key",
                        "in": "query",
                        "name": "passkey",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "Version of API",
                        "in": "query",
                        "name": "apiVersion",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Pet"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Invalid tag value"
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ],
                "summary": "Finds Reviews by PassKey",
                "tags": [
                    "Reviews"
                ]
            }
        },
        "/pet/{petId}": {
            "delete": {
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "description": "",
                "operationId": "deletePet",
                "parameters": [
                    {
                        "description": "",
                        "in": "header",
                        "name": "api_key",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Pet id to delete",
                        "format": "int64",
                        "in": "path",
                        "name": "petId",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid pet value"
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ],
                "summary": "Deletes a pet",
                "tags": [
                    "pet"
                ]
            },
            "get": {
                "consumes": [
                    "application/xml",
                    "application/json",
                    "application/x-www-form-urlencoded"
                ],
                "description": "Returns a single pet",
                "operationId": "getPetById",
                "parameters": [
                    {
                        "description": "ID of pet to return",
                        "format": "int64",
                        "in": "path",
                        "name": "petId",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Pet"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Pet not found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    },
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ],
                "summary": "Find pet by ID",
                "tags": [
                    "pet"
                ]
            },
            "post": {
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "description": "",
                "operationId": "updatePetWithForm",
                "parameters": [
                    {
                        "description": "ID of pet that needs to be updated",
                        "in": "path",
                        "name": "petId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Updated name of the pet",
                        "in": "formData",
                        "name": "name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Updated status of the pet",
                        "in": "formData",
                        "name": "status",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ],
                "summary": "Updates a pet in the store with form data",
                "tags": [
                    "pet"
                ]
            }
        },
        "/pet/{petId}/uploadImage": {
            "post": {
                "consumes": [
                    "multipart/form-data"
                ],
                "description": "",
                "operationId": "uploadFile",
                "parameters": [
                    {
                        "description": "ID of pet to update",
                        "format": "int64",
                        "in": "path",
                        "name": "petId",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "description": "Additional data to pass to server",
                        "in": "formData",
                        "name": "additionalMetadata",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "file to upload",
                        "in": "formData",
                        "name": "file",
                        "required": false,
                        "type": "file"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ],
                "summary": "uploads an image",
                "tags": [
                    "pet"
                ]
            }
        }
    },
    "schemes": [
        "http"
    ],
    "securityDefinitions": {
        "api_key": {
            "in": "header",
            "name": "api_key",
            "type": "apiKey"
        },
        "petstore_auth": {
            "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
            "flow": "implicit",
            "scopes": {
                "read:pets": "read your pets",
                "write:pets": "modify pets in your account"
            },
            "type": "oauth2"
        }
    },
    "swagger": "2.0",
    "tags": [
        {
            "description": "Reviews",
            "externalDocs": {
                "description": "Find out more about Reviews",
                "url": "https://developer.bazaarvoice.com/docs/read/conversations/reviews"
            },
            "name": "reviews"
        }
    ]
}